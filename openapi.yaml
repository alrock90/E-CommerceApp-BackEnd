openapi: 3.0.3
info:
  description: Codecademy e-commerce REST API
  version: 1.0.0
  title: E-commerce REST API
servers:
  - url: http://localhost:4000/
tags:
  - name: auth
    description: register/login
    externalDocs:
      description: login portal
      url: http://localhost:3000/login.html
  - name: users
    description: users data
    externalDocs:
      description: take a look at your profile
      url: http://swagger.io
  - name: cart
    description: manage your cart
  - name: order
    description: order of your user
  - name: product
    description: products of the e-store
paths:
  /register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 200 Success
        '500':
          description: 500 Internal Server Error

  /login:
    post:
      tags:
        - auth
      summary: Login to a user account
      description: Login to a user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 200 Success
        '500':
          description: 500 Internal Server Error

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by userId
      description: ''
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found

    put:
      tags:
        - users
      summary: Update user
      description: ''
      parameters:
        - name: userId
          in: path
          description: name that needs to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
